using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Library.baseFn;
using Model;
using BLL;
using DAL;

namespace BLL
{
    public class CertificateCtrl : ICertificateCtrl
    {
        private Sys_Account account;
        Uow uow = null;
        public CertificateCtrl(Sys_Account account)
        {
            if (uow == null)
            {
                uow = new Uow();
            }
            this.account = account;
        }

        public void AddCertificate(Biz_Certificate certificate)
        {
            // certificate.Status = "正常";
            uow.Biz_Certificate.Add(certificate);
            uow.Commit();
        }



        public Biz_Certificate GetCertificateById(int certificateId)
        {
            return uow.Biz_Certificate.GetById(certificateId);
        }
        public List<Biz_Certificate> GetCertificateByIdList(List<int> certificateIdList)
        {
            return uow.Biz_Certificate.GetAll().Where(p => certificateIdList.Contains(p.Id)).ToList();
        }

        public Biz_Certificate GetCertificateByNo(string certificateNo)
        {
            return uow.Biz_Certificate.GetAll().Where(p => !p.Invalid).Where(p => p.CertificateNo == certificateNo).OrderByDescending(p=>p.Id).FirstOrDefault();
        }

        public Biz_CertificateChangeRecord GetCertificateChangeInfoById(int certificateChangeInfoId)
        {
            return uow.Biz_CertificateChangeRecord.GetById(certificateChangeInfoId);
        }

        public void UpdateCertificate(Biz_Certificate certificate)
        {
            throw new NotImplementedException();
        }

        public List<Biz_Certificate> GetCertificateList(string employeeName, string idNumber, string certificateNo, string certificateStatus, string enterpriseName, int page, int rows, ref int totalCount)
        {
            const string CERTIFICATESTATUS_VALID = "有效的";
            const string CERTIFICATESTATUS_INVALID = "无效的";

            IQueryable<Biz_Certificate> certificateQueryable = uow.Biz_Certificate.GetAll();

            if (!employeeName.IsNull())
            {
                certificateQueryable = certificateQueryable.Where(p => p.EmployeeName.Contains(employeeName));
            }
            if (!idNumber.IsNull())
            {
                certificateQueryable = certificateQueryable.Where(p => p.IDNumber.Contains(idNumber));
            }
            if (!certificateNo.IsNull())
            {
                certificateQueryable = certificateQueryable.Where(p => p.CertificateNo.Contains(certificateNo));
            }
            if (!enterpriseName.IsNull())
            {
                certificateQueryable = certificateQueryable.Where(p => p.EnterpriseName.Contains(enterpriseName));
            }
            if (!certificateStatus.IsNull())
            {
                if (certificateStatus == CERTIFICATESTATUS_VALID)
                {
                    certificateQueryable = certificateQueryable.Where(p => p.Invalid == false);
                }
                else if (certificateStatus == CERTIFICATESTATUS_INVALID)
                {
                    certificateQueryable = certificateQueryable.Where(p => p.Invalid == true || p.EndCertificateDate < DateTime.Now);
                }
            }

            certificateQueryable = certificateQueryable
                .GroupJoin(certificateQueryable, p => p.CertificateNo, q => q.CertificateNo, (p, q) => new { p, q })
                .Where(o => o.q.Max(x => x.Id) == o.p.Id).Select(o => o.p);

            totalCount = certificateQueryable.Count();
            int indexBegin = (page - 1) * rows;
            certificateQueryable = certificateQueryable.OrderByDescending(P => P.Id).Skip(indexBegin).Take(rows);
            return certificateQueryable.ToList();
        }

        public List<Biz_RelEmployeeCertificate> GetRelEmployeeCertificateListByCertificateIdList(List<int> certificateIdList)
        {
            IQueryable<Biz_RelEmployeeCertificate> relEmployeeCertificateQueryable = uow.Biz_RelEmployeeCertificate.GetAll().Where(p => certificateIdList.Contains(p.CertificateId));
            return relEmployeeCertificateQueryable.ToList();
        }
        public Biz_RelEmployeeCertificate GetRelEmployeeCertificateByCertificateId(int certificateId)
        {
            return uow.Biz_RelEmployeeCertificate.GetAll().Where(p => p.CertificateId == certificateId).Single();
        }
        public Biz_RelEmployeeCertificate GetRelEmployeeCertificateByEmployeeId(int employeeId)
        {
            return uow.Biz_RelEmployeeCertificate.GetAll().Where(p => p.EmployeeId == employeeId).Single();
        }
        public void ChangeCertificateStatus(int certificateId, string remark, string operateType)
        {
            const string OPERATIONTYPE_DISABLE = "吊销";
            const string OPERATIONTYPE_ENABLE = "恢复";

            Biz_Certificate certificate = uow.Biz_Certificate.GetById(certificateId);

            if (certificate.EndCertificateDate < DateTime.Now)
            {
                throw new Exception("证书已过期，无法进行操作");
            }


            if (operateType == OPERATIONTYPE_DISABLE)
            {
                if (certificate.Invalid == true)
                {
                    throw new Exception("无效的证书无法吊销");
                }
                certificate.Invalid = true;
            }
            else if (operateType == OPERATIONTYPE_ENABLE)
            {
                if (certificate.Invalid == false)
                {
                    throw new Exception("有效的证书无法恢复");
                }
                certificate.Invalid = false;
            }
            uow.Biz_Certificate.Update(certificate);


            Biz_CertificateOperationRecord certificateOperationRecord = new Biz_CertificateOperationRecord()
            {
                CertificateId = certificateId,
                OperateType = operateType,
                Remark = remark,
                CreateById = account.Id,
                CreateDate = DateTime.Now
            };
            uow.Biz_CertificateOperationRecord.Add(certificateOperationRecord);
            uow.Commit();

        }

        public List<Biz_CertificateOperationRecord> GetCertificateOperationRecordList(int certificateId)
        {
            IQueryable<Biz_CertificateOperationRecord> certificateOperationRecordQueryable = uow.Biz_CertificateOperationRecord.GetAll();
            certificateOperationRecordQueryable = certificateOperationRecordQueryable.Where(p => p.CertificateId == certificateId);
            return certificateOperationRecordQueryable.ToList();
        }

        public List<Biz_CertificateChangeRecord> GetCertificateChangList(string employeeName, string certificateNo, string certificateChangeStatus, string oldEnterpriseName, int page, int rows, ref int totalCount)
        {
            throw new NotImplementedException();
        }

        public void DeleteCertificateChangeRecord(int certificateChangeInfoId)
        {
            throw new NotImplementedException();
        }

        public void AddCertificateChangeRecord(Biz_CertificateChangeRecord certificateChangeRecord)
        {
            throw new NotImplementedException();
        }

        public void UpdateCertificateChangeRecord(Biz_CertificateChangeRecord certificateChangeRecord)
        {
            throw new NotImplementedException();
        }

        public void SubmitCertificateChangeRecord(int certificateChangeInfoId)
        {
            throw new NotImplementedException();
        }

        public List<Biz_CertificateChangeRecord> GetCertificateChangCheckList(string employeeName, string certificateNo, string certificateChangeStatus, string EnterpriseName, int page, int rows, ref int totalCount, List<string> cityList)
        {
            throw new NotImplementedException();
        }

        public void CheckedCertificateChangeRecord(int certificateChangeInfoId, string remark, bool passFlag)
        {
            throw new NotImplementedException();
        }
        //证书查询
        public Biz_Certificate CertificateSearch(string examType, string employeeName, string iDNumber)
        {
            Biz_Certificate cert = uow.Biz_Certificate.GetAll().Where(p => p.Invalid == false).Where(p => p.ExamType == examType && p.EmployeeName == employeeName && p.IDNumber == iDNumber).FirstOrDefault();
            return cert;
        }
    }
}
